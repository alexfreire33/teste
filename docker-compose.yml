version: '3.8'

services:
  postgres:
    image: postgres:16
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: taxa
    ports:
      - "5433:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d taxa"]
      interval: 5s
      timeout: 5s
      retries: 5
    command: >
      bash -c "
      # Processa backup compactado (.sql.gz)
      if ls /docker-entrypoint-initdb.d/*.sql.gz 1> /dev/null 2>&1; then
        echo 'Processando backup SQL compactado...'
        gunzip -c /docker-entrypoint-initdb.d/*.sql.gz | psql -U postgres -d taxa
      # Processa backup não compactado (.sql)
      elif ls /docker-entrypoint-initdb.d/*.sql 1> /dev/null 2>&1; then
        echo 'Processando backup SQL não compactado...'
        psql -U postgres -d taxa -f /docker-entrypoint-initdb.d/*.sql
      fi
      
      # Inicia o PostgreSQL normalmente
      exec /usr/local/bin/docker-entrypoint.sh postgres
      "

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: node-backend
    restart: always
    environment:
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: taxa
      DB_HOST: postgres
      DB_SCHEMA: inside
      DB_PORT: 5432
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - '3001:3001'

  survey-dashboard:
    build:
      context: ./survey-dashboard
      dockerfile: Dockerfile
    container_name: react-survey-dashboard
    restart: always
    ports:
      - '3000:3000'
    depends_on:
      - backend

volumes:
  pgdata: